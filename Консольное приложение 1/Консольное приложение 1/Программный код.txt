using System;
using System.IO;
using System.Threading.Tasks;
using System.IO.Compression;
using System.Text.Json;
using System.Xml;

namespace txt
{
    class Program_1
    {
        static void Main(string[] args, object Internal)
        {

            // Задание 1 инфо о компе
            DriveInfo[] drives = DriveInfo.GetDrives(); // Возращает все лог.имена дисков на компе

            foreach (DriveInfo drive in drives) // Предоставляем доступ к дискам
            {
                Console.WriteLine($"Название: {drive.Name}"); // Выводыим название диска и его тип
                Console.WriteLine($"Тип: {drive.DriveType}");
                if (drive.IsReady) // Возращает значение "Готов ли диск?", если да выполняем, если нет, то программа сворачивается
                {
                    Console.WriteLine($"Объем диска: {drive.TotalSize}");
                    Console.WriteLine($"Свободное пространство: {drive.TotalFreeSpace}"); // Вывдоим требуемые данные: объем дисков, свобоная память
                    Console.WriteLine($"Метка: {drive.VolumeLabel}");
                }

                Console.WriteLine(); // Записываем указанные данные
            }



            // Задание 2. Работа с тестовым файлом
            string path = @"E:\Lab_1_OS_2"; // Пишем адрес будущего файла и его папку
            DirectoryInfo dirInfo = new DirectoryInfo(path);  // метод для созлания чего-то нового
            if (!dirInfo.Exists)
            {
                dirInfo.Create(); // Если не нашли нужную папку создаем
            }

            Console.WriteLine("Введите строку для записи в файл:");
            string text = Console.ReadLine(); // Просим у пользователя строку и записываем ее

            using (FileStream fstream = new FileStream(@"E:\Lab_1_OS_2\file_2.txt", FileMode.OpenOrCreate)) // Открываем нужный файл
            {
                byte[] array = System.Text.Encoding.Default.GetBytes(text); // Заносим туда строку
                fstream.Write(array, 0, array.Length);   // Используем наш файл с записанной строкой и сообщаем об этом пользователю
                Console.WriteLine("Текст записан в файл");
            }


            using (FileStream fstream = File.OpenRead(@"E:\Lab_1_OS_2\file_2.txt")) // Открываем наш файл
            {
                byte[] array = new byte[fstream.Length];
                fstream.Read(array, 0, array.Length); // Читаем строку, считывая ее размер
                string textFromFile = System.Text.Encoding.Default.GetString(array); // Закрываем поток
                Console.WriteLine($"Текст из файла: {textFromFile}"); // Выводим нужную информацию
            }

            string surfile = @"E:\Lab_1_OS_2\file_2.txt";
            Console.WriteLine(File.Exists(surfile) ? "Найден" : "Такого нет"); // проверяем наличие файла
            {
                File.Delete(surfile);
                Console.WriteLine("Файл удален"); // Удаляем файл
            }
        }
    }
}



// Задание 3.
namespace xml
{
    class Person // Создаем класс откуда будем вытаскивать и затаскивать данные
    {
        public string Name { get; set; }
        public int Age { get; set; }
    }
    class Program_3
    {
        static async Task Main(string[] args)
        {
            // сохранение данных
            using (FileStream fs = new FileStream("file_3.json", FileMode.OpenOrCreate))
            {
                Person tom = new Person() { Name = "Tom", Age = 35 };
                await JsonSerializer.SerializeAsync<Person>(fs, tom);
                Console.WriteLine("Данные сохранены в файл");
            }
        }
    }
}


// Задание 4.
namespace jnos
{
    class User // Создаем класс откуда будем вытаскивать и затаскивать данные
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public string Company { get; set; }
    }
    class Program_4
    {
        static async Task Main(string[] args)
        {
            List<User> users = new List<User>();

            XmlDocument xDoc = new XmlDocument();
            xDoc.Load("E:\\Lab_1_OS_2\\file_4.xml"); // Подгружаем наш файл
            XmlElement xRoot = xDoc.DocumentElement;
            foreach (XmlElement xnode in xRoot)
            {
                User user = new User();
                XmlNode attr = xnode.Attributes.GetNamedItem("name");
                if (attr != null)
                    user.Name = attr.Value;

                foreach (XmlNode childnode in xnode.ChildNodes)
                {
                    if (childnode.Name == "company")
                        user.Company = childnode.InnerText;

                    if (childnode.Name == "age")
                        user.Age = Int32.Parse(childnode.InnerText);
                }
                users.Add(user);
            }
            foreach (User u in users)
                Console.WriteLine($"{u.Name} ({u.Company}) - {u.Age}");
            Console.Read();
        }
    }
}


// Задание 5.
namespace Zip
{
    class Program
    {
        static void Main(string[] args)
        {
            string sourceFolder = "E://file_5/"; // исходная папка
            string zipFile = "E://file_5.zip"; // сжатый файл
            string targetFolder = "E://Lab_1_OS_2"; // папка, куда распаковывается файл

            ZipFile.CreateFromDirectory(sourceFolder, zipFile);
            Console.WriteLine($"Папка {sourceFolder} архивирована в файл {zipFile}");
            ZipFile.ExtractToDirectory(zipFile, targetFolder);

            Console.WriteLine($"Файл {zipFile} распакован в папку {targetFolder}");
            Console.ReadLine();
        }
    }
}
